// Code generated by openapi-cli-generator. DO NOT EDIT.
// See https://github.com/danielgtaylor/openapi-cli-generator

package main

import (
	"fmt"

	"github.com/danielgtaylor/openapi-cli-generator/cli"
	"github.com/pkg/errors"
	"github.com/rs/zerolog/log"
	"github.com/spf13/cobra"
	"github.com/spf13/viper"
	"gopkg.in/h2non/gentleman.v2"
)

var apiSubcommand bool

func apiServers() []map[string]string {
	return []map[string]string{

		map[string]string{
			"description": "My Shop",
			"url":         "https://loclahost",
		},
	}
}

// Api Lisa all carts
func Api(params *viper.Viper) (*gentleman.Response, interface{}, error) {
	handlerPath := ""
	if apiSubcommand {
		handlerPath = "api " + handlerPath
	}

	server := viper.GetString("server")
	if server == "" {
		server = apiServers()[viper.GetInt("server-index")]["url"]
	}

	url := server + "/carts"

	req := cli.Client.Get().URL(url)

	paramCartid := params.GetInt64("cartid")
	if paramCartid != 0 {
		req = req.AddQuery("cartId", fmt.Sprintf("%v", paramCartid))
	}

	cli.HandleBefore(handlerPath, params, req)

	resp, err := req.Do()
	if err != nil {
		return nil, nil, errors.Wrap(err, "Request failed")
	}

	var decoded interface{}

	if resp.StatusCode < 400 {
		if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
			return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
		}
	} else {
		return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
	}

	after := cli.HandleAfter(handlerPath, params, resp, decoded)
	if after != nil {
		decoded = after
	}

	return resp, decoded, nil
}

// ApiListGoods List all goods
func ApiListGoods(params *viper.Viper) (*gentleman.Response, interface{}, error) {
	handlerPath := "listgoods"
	if apiSubcommand {
		handlerPath = "api " + handlerPath
	}

	server := viper.GetString("server")
	if server == "" {
		server = apiServers()[viper.GetInt("server-index")]["url"]
	}

	url := server + "/goods"

	req := cli.Client.Get().URL(url)

	paramGoodid := params.GetInt64("goodid")
	if paramGoodid != 0 {
		req = req.AddQuery("goodId", fmt.Sprintf("%v", paramGoodid))
	}
	paramLimit := params.GetInt64("limit")
	if paramLimit != 0 {
		req = req.AddQuery("limit", fmt.Sprintf("%v", paramLimit))
	}

	cli.HandleBefore(handlerPath, params, req)

	resp, err := req.Do()
	if err != nil {
		return nil, nil, errors.Wrap(err, "Request failed")
	}

	var decoded interface{}

	if resp.StatusCode < 400 {
		if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
			return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
		}
	} else {
		return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
	}

	after := cli.HandleAfter(handlerPath, params, resp, decoded)
	if after != nil {
		decoded = after
	}

	return resp, decoded, nil
}

// ApiCreateGood Create new good
func ApiCreateGood(paramName string, paramDescription string, paramCount string, params *viper.Viper, body string) (*gentleman.Response, interface{}, error) {
	handlerPath := "creategood"
	if apiSubcommand {
		handlerPath = "api " + handlerPath
	}

	server := viper.GetString("server")
	if server == "" {
		server = apiServers()[viper.GetInt("server-index")]["url"]
	}

	url := server + "/goods"

	req := cli.Client.Post().URL(url)

	req = req.AddQuery("name", paramName)

	req = req.AddQuery("description", paramDescription)

	req = req.AddQuery("count", paramCount)

	if body != "" {
		req = req.AddHeader("Content-Type", "").BodyString(body)
	}

	cli.HandleBefore(handlerPath, params, req)

	resp, err := req.Do()
	if err != nil {
		return nil, nil, errors.Wrap(err, "Request failed")
	}

	var decoded interface{}

	if resp.StatusCode < 400 {
		if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
			return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
		}
	} else {
		return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
	}

	after := cli.HandleAfter(handlerPath, params, resp, decoded)
	if after != nil {
		decoded = after
	}

	return resp, decoded, nil
}

// ApiUpdateGood Update good
func ApiUpdateGood(params *viper.Viper, body string) (*gentleman.Response, interface{}, error) {
	handlerPath := "updategood"
	if apiSubcommand {
		handlerPath = "api " + handlerPath
	}

	server := viper.GetString("server")
	if server == "" {
		server = apiServers()[viper.GetInt("server-index")]["url"]
	}

	url := server + "/goods"

	req := cli.Client.Put().URL(url)

	paramName := params.GetString("name")
	if paramName != "" {
		req = req.AddQuery("name", fmt.Sprintf("%v", paramName))
	}
	paramDescription := params.GetString("description")
	if paramDescription != "" {
		req = req.AddQuery("description", fmt.Sprintf("%v", paramDescription))
	}
	paramCount := params.GetInt64("count")
	if paramCount != 0 {
		req = req.AddQuery("count", fmt.Sprintf("%v", paramCount))
	}

	if body != "" {
		req = req.AddHeader("Content-Type", "").BodyString(body)
	}

	cli.HandleBefore(handlerPath, params, req)

	resp, err := req.Do()
	if err != nil {
		return nil, nil, errors.Wrap(err, "Request failed")
	}

	var decoded interface{}

	if resp.StatusCode < 400 {
		if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
			return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
		}
	} else {
		return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
	}

	after := cli.HandleAfter(handlerPath, params, resp, decoded)
	if after != nil {
		decoded = after
	}

	return resp, decoded, nil
}

// ApiDeleteGood Delete good
func ApiDeleteGood(params *viper.Viper) (*gentleman.Response, interface{}, error) {
	handlerPath := "deletegood"
	if apiSubcommand {
		handlerPath = "api " + handlerPath
	}

	server := viper.GetString("server")
	if server == "" {
		server = apiServers()[viper.GetInt("server-index")]["url"]
	}

	url := server + "/goods"

	req := cli.Client.Delete().URL(url)

	cli.HandleBefore(handlerPath, params, req)

	resp, err := req.Do()
	if err != nil {
		return nil, nil, errors.Wrap(err, "Request failed")
	}

	var decoded interface{}

	if resp.StatusCode < 400 {
		if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
			return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
		}
	} else {
		return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
	}

	after := cli.HandleAfter(handlerPath, params, resp, decoded)
	if after != nil {
		decoded = after
	}

	return resp, decoded, nil
}

func apiRegister(subcommand bool) {
	root := cli.Root

	if subcommand {
		root = &cobra.Command{
			Use:   "api",
			Short: "My Shop",
			Long:  cli.Markdown("My Shop"),
		}
		apiSubcommand = true
	} else {
		cli.Root.Short = "My Shop"
		cli.Root.Long = cli.Markdown("My Shop")
	}

	func() {
		params := viper.New()

		var examples string

		cmd := &cobra.Command{
			Use:     "",
			Short:   "Lisa all carts",
			Long:    cli.Markdown(""),
			Example: examples,
			Args:    cobra.MinimumNArgs(0),
			Run: func(cmd *cobra.Command, args []string) {

				_, decoded, err := Api(params)
				if err != nil {
					log.Fatal().Err(err).Msg("Error calling operation")
				}

				if err := cli.Formatter.Format(decoded); err != nil {
					log.Fatal().Err(err).Msg("Formatting failed")
				}

			},
		}
		root.AddCommand(cmd)

		cmd.Flags().Int64("cartid", 0, "Get concrete cart")

		cli.SetCustomFlags(cmd)

		if cmd.Flags().HasFlags() {
			params.BindPFlags(cmd.Flags())
		}

	}()

	func() {
		params := viper.New()

		var examples string

		cmd := &cobra.Command{
			Use:     "listgoods",
			Short:   "List all goods",
			Long:    cli.Markdown(""),
			Example: examples,
			Args:    cobra.MinimumNArgs(0),
			Run: func(cmd *cobra.Command, args []string) {

				_, decoded, err := ApiListGoods(params)
				if err != nil {
					log.Fatal().Err(err).Msg("Error calling operation")
				}

				if err := cli.Formatter.Format(decoded); err != nil {
					log.Fatal().Err(err).Msg("Formatting failed")
				}

			},
		}
		root.AddCommand(cmd)

		cmd.Flags().Int64("goodid", 0, "Get concrete good")
		cmd.Flags().Int64("limit", 0, "How many items to return at one time (max 100)")

		cli.SetCustomFlags(cmd)

		if cmd.Flags().HasFlags() {
			params.BindPFlags(cmd.Flags())
		}

	}()

	func() {
		params := viper.New()

		var examples string

		cmd := &cobra.Command{
			Use:     "creategood name description count",
			Short:   "Create new good",
			Long:    cli.Markdown(""),
			Example: examples,
			Args:    cobra.MinimumNArgs(3),
			Run: func(cmd *cobra.Command, args []string) {
				body, err := cli.GetBody("", args[3:])
				if err != nil {
					log.Fatal().Err(err).Msg("Unable to get body")
				}

				_, decoded, err := ApiCreateGood(args[0], args[1], args[2], params, body)
				if err != nil {
					log.Fatal().Err(err).Msg("Error calling operation")
				}

				if err := cli.Formatter.Format(decoded); err != nil {
					log.Fatal().Err(err).Msg("Formatting failed")
				}

			},
		}
		root.AddCommand(cmd)

		cli.SetCustomFlags(cmd)

		if cmd.Flags().HasFlags() {
			params.BindPFlags(cmd.Flags())
		}

	}()

	func() {
		params := viper.New()

		var examples string

		cmd := &cobra.Command{
			Use:     "updategood",
			Short:   "Update good",
			Long:    cli.Markdown(""),
			Example: examples,
			Args:    cobra.MinimumNArgs(0),
			Run: func(cmd *cobra.Command, args []string) {
				body, err := cli.GetBody("", args[0:])
				if err != nil {
					log.Fatal().Err(err).Msg("Unable to get body")
				}

				_, decoded, err := ApiUpdateGood(params, body)
				if err != nil {
					log.Fatal().Err(err).Msg("Error calling operation")
				}

				if err := cli.Formatter.Format(decoded); err != nil {
					log.Fatal().Err(err).Msg("Formatting failed")
				}

			},
		}
		root.AddCommand(cmd)

		cmd.Flags().String("name", "", "Name of good")
		cmd.Flags().String("description", "", "Description of good")
		cmd.Flags().Int64("count", 0, "Count of good on stock")

		cli.SetCustomFlags(cmd)

		if cmd.Flags().HasFlags() {
			params.BindPFlags(cmd.Flags())
		}

	}()

	func() {
		params := viper.New()

		var examples string

		cmd := &cobra.Command{
			Use:     "deletegood",
			Short:   "Delete good",
			Long:    cli.Markdown(""),
			Example: examples,
			Args:    cobra.MinimumNArgs(0),
			Run: func(cmd *cobra.Command, args []string) {

				_, decoded, err := ApiDeleteGood(params)
				if err != nil {
					log.Fatal().Err(err).Msg("Error calling operation")
				}

				if err := cli.Formatter.Format(decoded); err != nil {
					log.Fatal().Err(err).Msg("Formatting failed")
				}

			},
		}
		root.AddCommand(cmd)

		cli.SetCustomFlags(cmd)

		if cmd.Flags().HasFlags() {
			params.BindPFlags(cmd.Flags())
		}

	}()

}

// Package Api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Cart defines model for Cart.
type Cart struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`
	Id        int32      `json:"id"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// Good defines model for Good.
type Good struct {
	Count       int        `json:"count"`
	CreatedAt   *time.Time `json:"created_at,omitempty"`
	Description string     `json:"description"`
	Id          int32      `json:"id"`
	Name        string     `json:"name"`
	UpdatedAt   *time.Time `json:"updated_at,omitempty"`
}

// GetCartsParams defines parameters for GetCarts.
type GetCartsParams struct {
	// Get concrete cart
	CartId *int `json:"cartId,omitempty"`
}

// ListGoodsParams defines parameters for ListGoods.
type ListGoodsParams struct {
	// Get concrete good
	GoodId *int `json:"goodId,omitempty"`

	// How many items to return at one time (max 100)
	Limit *int32 `json:"limit,omitempty"`
}

// CreateGoodParams defines parameters for CreateGood.
type CreateGoodParams struct {
	// Name of good
	Name string `json:"name"`

	// Description of good
	Description string `json:"description"`

	// Count of good on stock
	Count int `json:"count"`
}

// UpdateGoodParams defines parameters for UpdateGood.
type UpdateGoodParams struct {
	// Name of good
	Name *string `json:"name,omitempty"`

	// Description of good
	Description *string `json:"description,omitempty"`

	// Count of good on stock
	Count *int `json:"count,omitempty"`
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetCarts request
	GetCarts(ctx context.Context, params *GetCartsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteGood request
	DeleteGood(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListGoods request
	ListGoods(ctx context.Context, params *ListGoodsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateGood request
	CreateGood(ctx context.Context, params *CreateGoodParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateGood request
	UpdateGood(ctx context.Context, params *UpdateGoodParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetCarts(ctx context.Context, params *GetCartsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCartsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteGood(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteGoodRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListGoods(ctx context.Context, params *ListGoodsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListGoodsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateGood(ctx context.Context, params *CreateGoodParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateGoodRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateGood(ctx context.Context, params *UpdateGoodParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateGoodRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetCartsRequest generates requests for GetCarts
func NewGetCartsRequest(server string, params *GetCartsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/carts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.CartId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cartId", runtime.ParamLocationQuery, *params.CartId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteGoodRequest generates requests for DeleteGood
func NewDeleteGoodRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/goods")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListGoodsRequest generates requests for ListGoods
func NewListGoodsRequest(server string, params *ListGoodsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/goods")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.GoodId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "goodId", runtime.ParamLocationQuery, *params.GoodId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateGoodRequest generates requests for CreateGood
func NewCreateGoodRequest(server string, params *CreateGoodParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/goods")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, params.Name); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description", runtime.ParamLocationQuery, params.Description); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, params.Count); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateGoodRequest generates requests for UpdateGood
func NewUpdateGoodRequest(server string, params *UpdateGoodParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/goods")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Description != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description", runtime.ParamLocationQuery, *params.Description); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetCarts request
	GetCartsWithResponse(ctx context.Context, params *GetCartsParams, reqEditors ...RequestEditorFn) (*GetCartsResponse, error)

	// DeleteGood request
	DeleteGoodWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteGoodResponse, error)

	// ListGoods request
	ListGoodsWithResponse(ctx context.Context, params *ListGoodsParams, reqEditors ...RequestEditorFn) (*ListGoodsResponse, error)

	// CreateGood request
	CreateGoodWithResponse(ctx context.Context, params *CreateGoodParams, reqEditors ...RequestEditorFn) (*CreateGoodResponse, error)

	// UpdateGood request
	UpdateGoodWithResponse(ctx context.Context, params *UpdateGoodParams, reqEditors ...RequestEditorFn) (*UpdateGoodResponse, error)
}

type GetCartsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Cart
}

// Status returns HTTPResponse.Status
func (r GetCartsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCartsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteGoodResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteGoodResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteGoodResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListGoodsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Good
}

// Status returns HTTPResponse.Status
func (r ListGoodsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListGoodsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateGoodResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateGoodResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateGoodResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateGoodResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateGoodResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateGoodResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetCartsWithResponse request returning *GetCartsResponse
func (c *ClientWithResponses) GetCartsWithResponse(ctx context.Context, params *GetCartsParams, reqEditors ...RequestEditorFn) (*GetCartsResponse, error) {
	rsp, err := c.GetCarts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCartsResponse(rsp)
}

// DeleteGoodWithResponse request returning *DeleteGoodResponse
func (c *ClientWithResponses) DeleteGoodWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteGoodResponse, error) {
	rsp, err := c.DeleteGood(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteGoodResponse(rsp)
}

// ListGoodsWithResponse request returning *ListGoodsResponse
func (c *ClientWithResponses) ListGoodsWithResponse(ctx context.Context, params *ListGoodsParams, reqEditors ...RequestEditorFn) (*ListGoodsResponse, error) {
	rsp, err := c.ListGoods(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListGoodsResponse(rsp)
}

// CreateGoodWithResponse request returning *CreateGoodResponse
func (c *ClientWithResponses) CreateGoodWithResponse(ctx context.Context, params *CreateGoodParams, reqEditors ...RequestEditorFn) (*CreateGoodResponse, error) {
	rsp, err := c.CreateGood(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateGoodResponse(rsp)
}

// UpdateGoodWithResponse request returning *UpdateGoodResponse
func (c *ClientWithResponses) UpdateGoodWithResponse(ctx context.Context, params *UpdateGoodParams, reqEditors ...RequestEditorFn) (*UpdateGoodResponse, error) {
	rsp, err := c.UpdateGood(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateGoodResponse(rsp)
}

// ParseGetCartsResponse parses an HTTP response from a GetCartsWithResponse call
func ParseGetCartsResponse(rsp *http.Response) (*GetCartsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCartsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Cart
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteGoodResponse parses an HTTP response from a DeleteGoodWithResponse call
func ParseDeleteGoodResponse(rsp *http.Response) (*DeleteGoodResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteGoodResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListGoodsResponse parses an HTTP response from a ListGoodsWithResponse call
func ParseListGoodsResponse(rsp *http.Response) (*ListGoodsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListGoodsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Good
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateGoodResponse parses an HTTP response from a CreateGoodWithResponse call
func ParseCreateGoodResponse(rsp *http.Response) (*CreateGoodResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateGoodResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateGoodResponse parses an HTTP response from a UpdateGoodWithResponse call
func ParseUpdateGoodResponse(rsp *http.Response) (*UpdateGoodResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateGoodResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Lisa all carts
	// (GET /carts)
	GetCarts(ctx echo.Context, params GetCartsParams) error
	// Delete good
	// (DELETE /goods)
	DeleteGood(ctx echo.Context) error
	// List all goods
	// (GET /goods)
	ListGoods(ctx echo.Context, params ListGoodsParams) error
	// Create new good
	// (POST /goods)
	CreateGood(ctx echo.Context, params CreateGoodParams) error
	// Update good
	// (PUT /goods)
	UpdateGood(ctx echo.Context, params UpdateGoodParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCarts converts echo context to params.
func (w *ServerInterfaceWrapper) GetCarts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCartsParams
	// ------------- Optional query parameter "cartId" -------------

	err = runtime.BindQueryParameter("form", true, false, "cartId", ctx.QueryParams(), &params.CartId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cartId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCarts(ctx, params)
	return err
}

// DeleteGood converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteGood(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteGood(ctx)
	return err
}

// ListGoods converts echo context to params.
func (w *ServerInterfaceWrapper) ListGoods(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListGoodsParams
	// ------------- Optional query parameter "goodId" -------------

	err = runtime.BindQueryParameter("form", true, false, "goodId", ctx.QueryParams(), &params.GoodId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter goodId: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListGoods(ctx, params)
	return err
}

// CreateGood converts echo context to params.
func (w *ServerInterfaceWrapper) CreateGood(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateGoodParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Required query parameter "description" -------------

	err = runtime.BindQueryParameter("form", true, true, "description", ctx.QueryParams(), &params.Description)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter description: %s", err))
	}

	// ------------- Required query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, true, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateGood(ctx, params)
	return err
}

// UpdateGood converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateGood(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateGoodParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "description" -------------

	err = runtime.BindQueryParameter("form", true, false, "description", ctx.QueryParams(), &params.Description)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter description: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateGood(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/carts", wrapper.GetCarts)
	router.DELETE(baseURL+"/goods", wrapper.DeleteGood)
	router.GET(baseURL+"/goods", wrapper.ListGoods)
	router.POST(baseURL+"/goods", wrapper.CreateGood)
	router.PUT(baseURL+"/goods", wrapper.UpdateGood)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7yVzW7bMAzHX0XgBmwDvNhtd/I1BbIC3S7DTkUwaDLjqLM+KtHtgsLvPkhy6zpxmrXr",
	"ekos0fyT/JH0LQijrNGoyUN5C16sUfH4d84dhV/rjEVHEuOpcMgJqx883q2MU+EfVJzwI0mFkAFtLEIJ",
	"npzUNXQZyGpkKzWdHA92UhPW6IJha6snOu8ycHjVSocVlBdBaXlvY35eoqDgd2FMNZGKaXUU2g3kOVlW",
	"6IWTlqTRD5w+owqaK5z08BLl6d2Pw836WuzWLniQemWC4ChB+LJh39bGBk1JDY5OrtH5ZHU0K2ZFiN1Y",
	"1NxKKOFkVsxOIAPLaR055IK71H01xswCJB5kziooYYE0jwbhFccVEjoP5cV2QAskJowWDglZcAkhdCjh",
	"qkW3uUu8hHB1FgqRen2qAbplqJu3RvvUKsdFkTpGE6ae4dY2UsQo80ufkA8OJaGKL751uIIS3uTDmOX9",
	"jOVxwLr7knPn+CZVfJxYjcRqY6p3nt0FFcn6VinuNlDCufSc8aZhoi8U8TqUCNLzMljnwYVPHBsk3C30",
	"aTyPs7KT/qfdBrBtCqsPSmwHldxFkwcRpSiWXTYN+1x6WkSTp9DuNaZoh6tDtLNt55/NDVNcb1jkyMgw",
	"h9Q6zTgxo5GFYWPvFf/Njoriwx7lRipJI+GDs/86fRcJv1TfUey7uke2S9kaP4F5Hvdr32qPcv7KFTKz",
	"egxxv9CGRUeuxQngw1LcFjkdng5ojbfmP0jOw8K9E2NGM09G/Nq3suJ2/gu9xzrpaGKEjT+EOJFiGm/2",
	"T7JtJxB/jx+rl0X8Ckj/N8InIXvG1k1l38cq2qK7ngYxfMBb10AJayLryzxvjGj4Ogxyt+z+BAAA//9M",
	"9oB1MgoAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

